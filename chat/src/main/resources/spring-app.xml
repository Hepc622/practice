<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">
    <context:component-scan base-package="com.practice.chat.*" />  
    <!-- 引入配置文件 -->  
    <!-- <bean id="propertyConfigurer"  
        class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">  
        <property name="location" value="classpath:jdbc.properties" />  
    </bean>   -->
    <context:property-placeholder location="classpath:jdbc.properties" />
    <context:property-placeholder location="classpath:redis.properties" />
    <bean id="connectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"
          p:host-name="188.131.156.22" p:port="6389" p:password="qwertyuiop"  />

    <bean id="redisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">
        <property name="connectionFactory"   ref="connectionFactory" />
    </bean>

    <!--<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"  -->
        <!--destroy-method="close">  -->
        <!--<property name="driverClassName" value="${driver}" />  -->
        <!--<property name="url" value="${url}" />  -->
        <!--<property name="username" value="${user}" />  -->
        <!--<property name="password" value="${password}" />  -->
        <!--&lt;!&ndash; 初始化连接大小 &ndash;&gt;  -->
        <!--<property name="initialSize" value="${initialSize}"></property>  -->
        <!--&lt;!&ndash; 连接池最大数量 &ndash;&gt;  -->
        <!--<property name="maxActive" value="${maxActive}"></property>  -->
        <!--&lt;!&ndash; 连接池最大空闲 &ndash;&gt;  -->
        <!--<property name="maxIdle" value="${maxIdle}"></property>  -->
        <!--&lt;!&ndash; 连接池最小空闲 &ndash;&gt;  -->
        <!--<property name="minIdle" value="${minIdle}"></property>  -->
        <!--&lt;!&ndash; 获取连接最大等待时间 &ndash;&gt;  -->
        <!--<property name="maxWait" value="${maxWait}"></property>  -->
    <!--</bean>  -->
  <!---->
    <!--&lt;!&ndash; spring和MyBatis完美整合，不需要mybatis的配置映射文件 &ndash;&gt;  -->
    <!--<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">  -->
        <!--<property name="dataSource" ref="dataSource" />  -->
        <!--&lt;!&ndash; 指定mybatis全局配置文件的位置 &ndash;&gt;-->
		<!--<property name="configLocation" value="classpath:spring-mybatis.xml"></property>-->
		<!--&lt;!&ndash; 定义别名,如果使用了mybatis的逆向工程，无需这个,因为配置文件是自动生成的，不用你写。 &ndash;&gt;-->
		<!--<property name="typeAliasesPackage" value="com.hpc.fan.bean"></property>-->
        <!--&lt;!&ndash; 自动扫描mapping.xml文件 &ndash;&gt;  -->
        <!--<property name="mapperLocations" value="classpath:com/practice/chat/bean/*.xml"></property>-->
    <!--</bean>  -->
  <!---->
    <!--&lt;!&ndash; DAO接口所在包名，Spring会自动查找其下的类 &ndash;&gt;  -->
    <!--<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">  -->
        <!--<property name="basePackage" value="com.practice.chat.dao" />  -->
        <!--<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>  -->
    <!--</bean>  -->
  	<!--&lt;!&ndash; 配置一个可以执行批量的sqlSession &ndash;&gt;-->
	<!--<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">-->
		<!--<constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"></constructor-arg>-->
		<!--<constructor-arg name="executorType" value="BATCH"></constructor-arg>-->
	<!--</bean>-->
	<!---->
    <!--&lt;!&ndash; (事务管理)transaction manager, use JtaTransactionManager for global tx &ndash;&gt;  -->
    <!--<bean id="transactionManager"  -->
        <!--class="org.springframework.jdbc.datasource.DataSourceTransactionManager">  -->
        <!--<property name="dataSource" ref="dataSource" />  -->
    <!--</bean>  -->
  	<!--&lt;!&ndash;开启基于注解的事务，使用xml配置形式的事务（必要主要的都是使用配置式）  &ndash;&gt;-->
	<!--<aop:config>-->
		<!--&lt;!&ndash; 切入点表达式 &ndash;&gt;-->
		<!--<aop:pointcut expression="execution(* com.practice.chat.service..*(..))" id="txPoint"/>-->
		<!--&lt;!&ndash; 配置事务增强 &ndash;&gt;-->
		<!--<aop:advisor advice-ref="txAdvice" pointcut-ref="txPoint"/>-->
	<!--</aop:config>-->
	<!---->
	<!--&lt;!&ndash;配置事务增强，事务如何切入  &ndash;&gt;-->
	<!--<tx:advice id="txAdvice" transaction-manager="transactionManager">-->
		<!--<tx:attributes>-->
			<!--&lt;!&ndash; 所有方法都是事务方法 &ndash;&gt;-->
			<!--<tx:method name="*"/>-->
			<!--&lt;!&ndash;以get开始的所有方法  &ndash;&gt;-->
			<!--<tx:method name="get*" read-only="true"/>-->
			<!--&lt;!&ndash;以find开始的所有方法  &ndash;&gt;-->
			<!--<tx:method name="find*" read-only="true"/>-->
		<!--</tx:attributes>-->
	<!--</tx:advice>-->
	
	<!-- Spring配置文件的核心点（数据源、与mybatis的整合，事务控制） -->
</beans>